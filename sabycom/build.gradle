plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.github.delight-im:Android-AdvancedWebView:v3.2.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.3.1"
    implementation('com.facebook.fresco:fresco:2.6.0') {
        exclude group: 'com.facebook.soloader', module: 'soloader'
        exclude group: 'com.facebook.fresco', module: 'soloader'
        exclude group: 'com.facebook.fresco', module: 'nativeimagefilters'
        exclude group: 'com.facebook.fresco', module: 'nativeimagetranscoder'
        exclude group: 'com.facebook.fresco', module: 'memory-type-native'
        exclude group: 'com.facebook.fresco', module: 'imagepipeline-native'
    }

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> rootProject.ext[name] = value }
} else {
    rootProject.ext["ossrhUsername"] = System.getenv('SONATYPE_LOGIN')
    rootProject.ext["ossrhPassword"] = System.getenv('SONATYPE_PASSWORD')
    rootProject.ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    rootProject.ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    rootProject.ext["signing.key"] = System.getenv('SIGNING_KEY')
    rootProject.ext["artifactoryLogin"] = System.getenv('ARTIFACTORY_LOGIN')
    rootProject.ext["artifactoryPassword"] = System.getenv('ARTIFACTORY_PASSWORD')
}

afterEvaluate {
    if (!project.hasProperty("toCentral")) {
        localPublish()
    } else {
        mavenCentralPublish()
    }
}

def localPublish() {
    publishing {
        publications {
            debug(MavenPublication) {
                from components.debug
                groupId = publishingGroupId
                artifactId = publishingArtifactId
                version = publishingVersionCode

                repositories {
                    maven {
                        allowInsecureProtocol = true
                        url "http://maven.sbis.ru:8081/artifactory/sbis"
                        credentials {
                            username getPropertyOrEmpty("artifactoryLogin")
                            password getPropertyOrEmpty("artifactoryPassword")
                        }
                    }
                }
            }
        }
    }
}

def mavenCentralPublish() {
    publishing {
        publications {

            release(MavenPublication) {
                from components.release

                groupId = publishingGroupId
                artifactId = publishingArtifactId
                version = publishingVersionCode

                repositories {
                    maven {
                        url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                        credentials {
                            username getPropertyOrEmpty("ossrhUsername")
                            password getPropertyOrEmpty("ossrhPassword")
                        }
                    }
                }
                pom {
                    name = publishingArtifactId
                    description = 'Library for creating an online support chat'
                    url = 'https://github.com/saby/android-sabycom'

                    scm {
                        connection = 'https://github.com/saby/android-sabycom'
                        developerConnection = 'git@github.com:saby/android-sabycom.git'
                        url = 'https://tensor.ru/'
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id = 'ma.kolpakov'
                            name = 'Mikhail Kolpakov'
                            email = 'ma.kolpakov@tensor.ru'
                        }
                        developer {
                            id = 'am.boldinov'
                            name = 'Aleksey Boldinov'
                            email = 'am.boldinov@tensor.ru'
                        }
                        developer {
                            id = 'du.bykov'
                            name = 'Dmitry Bykov'
                            email = 'du.bykov@tensor.ru'
                        }
                    }
                }
            }
            debug(MavenPublication) {
                from components.debug

                groupId = publishingGroupId
                artifactId = publishingArtifactId
                version = publishingVersionCode
            }
        }
    }
    signing {
        useInMemoryPgpKeys(
                getPropertyOrEmpty("signing.keyId"),
                getPropertyOrEmpty("signing.key"),
                getPropertyOrEmpty("signing.password")
        )
        sign publishing.publications.release
    }
}

String getPropertyOrEmpty(String name) {
    if (!rootProject.ext.has(name)) return ""
    return rootProject.ext[name]
}